{"ast":null,"code":"import axios from \"axios\";\nconst DOMAIN = 'http://localhost:8080';\nconst API_DOMAIN = `${DOMAIN}/api/v1`;\nconst GET_CATEGORY_URL = () => `${API_DOMAIN}/Kiosk/category-list`;\n_c = GET_CATEGORY_URL;\nexport const getCategoryRequest = async () => {\n  const result = await axios.get(GET_CATEGORY_URL()).then(response => {\n    console.log(\"a\");\n    const responseBody = response.data;\n    return responseBody;\n  }).catch(error => {\n    if (!error.response) return null;\n    const responseBody = error.response.data;\n    return responseBody;\n  });\n  return result;\n};\nconst POST_ORDER_PRODUCT_URL = `${API_DOMAIN}/Kiosk/order-product`;\nexport const postCtRequest = async requestBody => {\n  try {\n    const result = await axios.post(POST_ORDER_PRODUCT_URL, requestBody);\n    return result.data; // 성공한 경우 데이터를 반환하거나 다른 처리를 수행합니다.\n  } catch (error) {\n    console.error('Error in postCartRequest:', error);\n    throw error; // 에러를 다시 throw하여 호출하는 측에서 처리할 수 있도록 합니다.\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"GET_CATEGORY_URL\");","map":{"version":3,"names":["axios","DOMAIN","API_DOMAIN","GET_CATEGORY_URL","_c","getCategoryRequest","result","get","then","response","console","log","responseBody","data","catch","error","POST_ORDER_PRODUCT_URL","postCtRequest","requestBody","post","$RefreshReg$"],"sources":["/Users/jeongjaeho/Desktop/project/Order/frontend/src/Apis/index.ts"],"sourcesContent":["import axios from \"axios\";\nimport GetCategoryResponseDto from \"./Response/Category/getCategoryResponse.dto\";\nimport { ResponseDto } from \"./Response\";\nimport { PostOrderProductRequestDto } from \"./Request\";\n\n\nconst DOMAIN ='http://localhost:8080';\nconst API_DOMAIN =`${DOMAIN}/api/v1`;\n\nconst GET_CATEGORY_URL=()=>`${API_DOMAIN}/Kiosk/category-list`;\n\nexport const getCategoryRequest=async ()=>{\n    const result=await axios.get(GET_CATEGORY_URL())\n    .then(response=>{\n       console.log(\"a\")\n        const responseBody:GetCategoryResponseDto=response.data;\n       \n        return responseBody;\n        \n    })\n    .catch(error=>{\n        \n        if(!error.response)return null;\n        const responseBody:ResponseDto=error.response.data;\n        return responseBody;\n    })\n    \n    return result;\n\n}\nconst POST_ORDER_PRODUCT_URL = `${API_DOMAIN}/Kiosk/order-product`;\n\nexport const postCtRequest = async (requestBody: PostOrderProductRequestDto) => {\n  try {\n    const result = await axios.post(POST_ORDER_PRODUCT_URL, requestBody);\n    return result.data; // 성공한 경우 데이터를 반환하거나 다른 처리를 수행합니다.\n  } catch (error) {\n    console.error('Error in postCartRequest:', error);\n    throw error; // 에러를 다시 throw하여 호출하는 측에서 처리할 수 있도록 합니다.\n  }\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAMzB,MAAMC,MAAM,GAAE,uBAAuB;AACrC,MAAMC,UAAU,GAAG,GAAED,MAAO,SAAQ;AAEpC,MAAME,gBAAgB,GAACA,CAAA,KAAK,GAAED,UAAW,sBAAqB;AAACE,EAAA,GAAzDD,gBAAgB;AAEtB,OAAO,MAAME,kBAAkB,GAAC,MAAAA,CAAA,KAAU;EACtC,MAAMC,MAAM,GAAC,MAAMN,KAAK,CAACO,GAAG,CAACJ,gBAAgB,CAAC,CAAC,CAAC,CAC/CK,IAAI,CAACC,QAAQ,IAAE;IACbC,OAAO,CAACC,GAAG,CAAC,GAAG,CAAC;IACf,MAAMC,YAAmC,GAACH,QAAQ,CAACI,IAAI;IAEvD,OAAOD,YAAY;EAEvB,CAAC,CAAC,CACDE,KAAK,CAACC,KAAK,IAAE;IAEV,IAAG,CAACA,KAAK,CAACN,QAAQ,EAAC,OAAO,IAAI;IAC9B,MAAMG,YAAwB,GAACG,KAAK,CAACN,QAAQ,CAACI,IAAI;IAClD,OAAOD,YAAY;EACvB,CAAC,CAAC;EAEF,OAAON,MAAM;AAEjB,CAAC;AACD,MAAMU,sBAAsB,GAAI,GAAEd,UAAW,sBAAqB;AAElE,OAAO,MAAMe,aAAa,GAAG,MAAOC,WAAuC,IAAK;EAC9E,IAAI;IACF,MAAMZ,MAAM,GAAG,MAAMN,KAAK,CAACmB,IAAI,CAACH,sBAAsB,EAAEE,WAAW,CAAC;IACpE,OAAOZ,MAAM,CAACO,IAAI,CAAC,CAAC;EACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;AAAA,IAAAX,EAAA;AAAAgB,YAAA,CAAAhB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}