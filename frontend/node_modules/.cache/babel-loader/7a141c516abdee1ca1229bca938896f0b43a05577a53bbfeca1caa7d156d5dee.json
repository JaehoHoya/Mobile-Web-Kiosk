{"ast":null,"code":"var _jsxFileName = \"/Users/jeongjaeho/Desktop/project/Order/frontend/src/Navbar/CategoryNavbar.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styles from './style.module.css';\nimport CategoryButton from './CategoryButton';\nimport useSpeechToText from '../Speech';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CategoryNavbar({\n  categories,\n  handleCategoryClick,\n  activeCategoryId\n}) {\n  _s();\n  const {\n    transcript,\n    listening,\n    toggleListening\n  } = useSpeechToText(); // transcript 변수 먼저 정의\n\n  const [matchingCategoryIndex, setMatchingCategoryIndex] = useState(null); // 일치하는 카테고리의 인덱스를 추적\n\n  useEffect(() => {\n    // 카테고리 목록이 변경될 때마다 일치하는 카테고리 찾기\n    const matchIndex = categories.findIndex(category => category.categoryName === transcript);\n    if (matchIndex !== -1) {\n      // 카테고리 이름과 일치하는 경우 해당 카테고리 인덱스 설정\n      setMatchingCategoryIndex(matchIndex);\n      handleCategoryClick(categories[matchIndex].categoryId); // 해당 카테고리를 선택하도록 핸들러 호출\n    } else {\n      // 일치하는 카테고리를 찾지 못한 경우 일치 인덱스 초기화\n      setMatchingCategoryIndex(null);\n    }\n  }, [categories, transcript]); // 카테고리 목록 또는 음성 인식 결과가 변경될 때마다 호출\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.CategoryWrapper,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.CategoryTitle,\n        children: \"\\uAC1C\\uBC1C\\uC790 \\uD0A4\\uC624\\uC2A4\\uD06C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"transcript\",\n        value: transcript,\n        onChange: () => {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleListening,\n        children: listening ? '음성인식 중지' : '음성인식 시작'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.categoryNavbar,\n      children: categories.map((category, index) => /*#__PURE__*/_jsxDEV(CategoryButton, {\n        categoryId: category.categoryId,\n        categoryName: category.categoryName,\n        isActive: index === matchingCategoryIndex // 현재 카테고리가 일치하는 카테고리인지 확인\n        ,\n        onclick: () => handleCategoryClick(category.categoryId)\n      }, category.categoryId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(CategoryNavbar, \"sHGTbfZWURKGLvrR9YSszzkELis=\", false, function () {\n  return [useSpeechToText];\n});\n_c = CategoryNavbar;\nvar _c;\n$RefreshReg$(_c, \"CategoryNavbar\");","map":{"version":3,"names":["React","useEffect","useState","styles","CategoryButton","useSpeechToText","jsxDEV","_jsxDEV","Fragment","_Fragment","CategoryNavbar","categories","handleCategoryClick","activeCategoryId","_s","transcript","listening","toggleListening","matchingCategoryIndex","setMatchingCategoryIndex","matchIndex","findIndex","category","categoryName","categoryId","children","className","CategoryWrapper","CategoryTitle","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","onClick","categoryNavbar","map","index","isActive","onclick","_c","$RefreshReg$"],"sources":["/Users/jeongjaeho/Desktop/project/Order/frontend/src/Navbar/CategoryNavbar.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styles from './style.module.css';\nimport CategoryButton from './CategoryButton';\nimport useSpeechToText from '../Speech';\n\ninterface CategoryNavbarProps {\n  categories: { categoryId: number; categoryName: string }[];\n  handleCategoryClick: (categoryId: number) => void;\n  activeCategoryId: number;\n}\n\nexport default function CategoryNavbar({ categories, handleCategoryClick, activeCategoryId }: CategoryNavbarProps) {\n  const { transcript, listening, toggleListening } = useSpeechToText(); // transcript 변수 먼저 정의\n\n  const [matchingCategoryIndex, setMatchingCategoryIndex] = useState<number | null>(null); // 일치하는 카테고리의 인덱스를 추적\n\n  useEffect(() => {\n    // 카테고리 목록이 변경될 때마다 일치하는 카테고리 찾기\n    const matchIndex = categories.findIndex(category => category.categoryName === transcript);\n    if (matchIndex !== -1) {\n      // 카테고리 이름과 일치하는 경우 해당 카테고리 인덱스 설정\n      setMatchingCategoryIndex(matchIndex);\n      handleCategoryClick(categories[matchIndex].categoryId); // 해당 카테고리를 선택하도록 핸들러 호출\n    } else {\n      // 일치하는 카테고리를 찾지 못한 경우 일치 인덱스 초기화\n      setMatchingCategoryIndex(null);\n    }\n  }, [categories, transcript]); // 카테고리 목록 또는 음성 인식 결과가 변경될 때마다 호출\n\n  return (\n    <>\n      <div className={styles.CategoryWrapper}>\n        <div className={styles.CategoryTitle}>개발자 키오스크</div>\n        <textarea className=\"transcript\" value={transcript} onChange={() => {}} />\n        <button onClick={toggleListening}>\n          {listening ? '음성인식 중지' : '음성인식 시작'}\n        </button>\n      </div>\n      <div className={styles.categoryNavbar}>\n        {categories.map((category, index) => (\n          <CategoryButton\n            categoryId={category.categoryId}\n            categoryName={category.categoryName}\n            key={category.categoryId}\n            isActive={index === matchingCategoryIndex} // 현재 카테고리가 일치하는 카테고리인지 확인\n            onclick={() => handleCategoryClick(category.categoryId)}\n          />\n        ))}\n      </div>\n    </>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,eAAe,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAQxC,eAAe,SAASC,cAAcA,CAAC;EAAEC,UAAU;EAAEC,mBAAmB;EAAEC;AAAsC,CAAC,EAAE;EAAAC,EAAA;EACjH,MAAM;IAAEC,UAAU;IAAEC,SAAS;IAAEC;EAAgB,CAAC,GAAGZ,eAAe,CAAC,CAAC,CAAC,CAAC;;EAEtE,MAAM,CAACa,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGjB,QAAQ,CAAgB,IAAI,CAAC,CAAC,CAAC;;EAEzFD,SAAS,CAAC,MAAM;IACd;IACA,MAAMmB,UAAU,GAAGT,UAAU,CAACU,SAAS,CAACC,QAAQ,IAAIA,QAAQ,CAACC,YAAY,KAAKR,UAAU,CAAC;IACzF,IAAIK,UAAU,KAAK,CAAC,CAAC,EAAE;MACrB;MACAD,wBAAwB,CAACC,UAAU,CAAC;MACpCR,mBAAmB,CAACD,UAAU,CAACS,UAAU,CAAC,CAACI,UAAU,CAAC,CAAC,CAAC;IAC1D,CAAC,MAAM;MACL;MACAL,wBAAwB,CAAC,IAAI,CAAC;IAChC;EACF,CAAC,EAAE,CAACR,UAAU,EAAEI,UAAU,CAAC,CAAC,CAAC,CAAC;;EAE9B,oBACER,OAAA,CAAAE,SAAA;IAAAgB,QAAA,gBACElB,OAAA;MAAKmB,SAAS,EAAEvB,MAAM,CAACwB,eAAgB;MAAAF,QAAA,gBACrClB,OAAA;QAAKmB,SAAS,EAAEvB,MAAM,CAACyB,aAAc;QAAAH,QAAA,EAAC;MAAQ;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACpDzB,OAAA;QAAUmB,SAAS,EAAC,YAAY;QAACO,KAAK,EAAElB,UAAW;QAACmB,QAAQ,EAAEA,CAAA,KAAM,CAAC;MAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC1EzB,OAAA;QAAQ4B,OAAO,EAAElB,eAAgB;QAAAQ,QAAA,EAC9BT,SAAS,GAAG,SAAS,GAAG;MAAS;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACNzB,OAAA;MAAKmB,SAAS,EAAEvB,MAAM,CAACiC,cAAe;MAAAX,QAAA,EACnCd,UAAU,CAAC0B,GAAG,CAAC,CAACf,QAAQ,EAAEgB,KAAK,kBAC9B/B,OAAA,CAACH,cAAc;QACboB,UAAU,EAAEF,QAAQ,CAACE,UAAW;QAChCD,YAAY,EAAED,QAAQ,CAACC,YAAa;QAEpCgB,QAAQ,EAAED,KAAK,KAAKpB,qBAAsB,CAAC;QAAA;QAC3CsB,OAAO,EAAEA,CAAA,KAAM5B,mBAAmB,CAACU,QAAQ,CAACE,UAAU;MAAE,GAFnDF,QAAQ,CAACE,UAAU;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGzB,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA,eACN,CAAC;AAEP;AAAClB,EAAA,CAxCuBJ,cAAc;EAAA,QACeL,eAAe;AAAA;AAAAoC,EAAA,GAD5C/B,cAAc;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}