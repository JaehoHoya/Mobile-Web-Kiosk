{"ast":null,"code":"var _jsxFileName = \"/Users/jeongjaeho/Desktop/project/Order/frontend/src/Navbar/CategoryNavbar.tsx\",\n  _s = $RefreshSig$();\n// CategoryNavbar.js\n\nimport React, { useEffect } from 'react';\nimport styles from './style.module.css';\nimport CategoryButton from './CategoryButton';\nimport useSpeechToText from '../Speech';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CategoryNavbar = ({\n  categories,\n  handleCategoryClick,\n  activeCategoryId\n}) => {\n  _s();\n  const {\n    transcript,\n    listening,\n    toggleListening,\n    resetTranscript\n  } = useSpeechToText();\n  useEffect(() => {\n    // categories 배열이 비어있지 않은 경우에만 첫 번째 카테고리의 상품을 표시\n    if (categories.length > 0) {\n      handleCategoryClick(categories[0].categoryId);\n    }\n  }, [categories]);\n  useEffect(() => {\n    const words = transcript.split(' '); // 음성 입력을 공백을 기준으로 단어로 분리\n    const matchingCategory = categories.find(category => words.includes(category.categoryName));\n    if (matchingCategory) {\n      handleCategoryClick(matchingCategory.categoryId);\n      resetTranscript(); // 일치하는 카테고리 버튼이 눌렸을 때 음성값 초기화\n    } else {\n      resetTranscript(); // 일치하는 카테고리가 없으면 음성값 초기화\n    }\n  }, [transcript, categories, handleCategoryClick]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.CategoryWrapper,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.CategoryTitle,\n        children: \"\\uAC1C\\uBC1C\\uC790 \\uD0A4\\uC624\\uC2A4\\uD06C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"transcript\",\n        value: transcript,\n        onChange: () => {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleListening,\n        children: listening ? '음성인식 중지' : '음성인식 시작'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.categoryNavbar,\n      children: categories.map(category => /*#__PURE__*/_jsxDEV(CategoryButton, {\n        categoryId: category.categoryId,\n        categoryName: category.categoryName,\n        isActive: category.categoryId === activeCategoryId,\n        onclick: () => handleCategoryClick(category.categoryId)\n      }, category.categoryId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(CategoryNavbar, \"42Kw+WHwNECNZVUWbU60I39a9Ks=\", false, function () {\n  return [useSpeechToText];\n});\n_c = CategoryNavbar;\nexport default CategoryNavbar;\nvar _c;\n$RefreshReg$(_c, \"CategoryNavbar\");","map":{"version":3,"names":["React","useEffect","styles","CategoryButton","useSpeechToText","jsxDEV","_jsxDEV","Fragment","_Fragment","CategoryNavbar","categories","handleCategoryClick","activeCategoryId","_s","transcript","listening","toggleListening","resetTranscript","length","categoryId","words","split","matchingCategory","find","category","includes","categoryName","children","className","CategoryWrapper","CategoryTitle","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","onClick","categoryNavbar","map","isActive","onclick","_c","$RefreshReg$"],"sources":["/Users/jeongjaeho/Desktop/project/Order/frontend/src/Navbar/CategoryNavbar.tsx"],"sourcesContent":["// CategoryNavbar.js\n\nimport React, { useEffect } from 'react';\nimport styles from './style.module.css';\nimport CategoryButton from './CategoryButton';\nimport useSpeechToText from '../Speech';\n\ninterface CategoryNavbarProps {\n  categories: { categoryId: number; categoryName: string }[];\n  handleCategoryClick: (categoryId: number) => void;\n  activeCategoryId: number;\n}\n\nconst CategoryNavbar: React.FC<CategoryNavbarProps> = ({ categories, handleCategoryClick, activeCategoryId }) => {\n  const { transcript, listening, toggleListening,resetTranscript } = useSpeechToText();\n\n  useEffect(() => {\n    // categories 배열이 비어있지 않은 경우에만 첫 번째 카테고리의 상품을 표시\n    if (categories.length > 0) {\n      handleCategoryClick(categories[0].categoryId);\n    }\n  }, [categories]); \n\n  useEffect(() => {\n    const words = transcript.split(' '); // 음성 입력을 공백을 기준으로 단어로 분리\n    const matchingCategory = categories.find(category => words.includes(category.categoryName));\n    if (matchingCategory) {\n      handleCategoryClick(matchingCategory.categoryId);\n      resetTranscript(); // 일치하는 카테고리 버튼이 눌렸을 때 음성값 초기화\n    } else {\n      resetTranscript(); // 일치하는 카테고리가 없으면 음성값 초기화\n    }\n  }, [transcript, categories, handleCategoryClick]);\n\n  return (\n    <>\n      <div className={styles.CategoryWrapper}>\n        <div className={styles.CategoryTitle}>개발자 키오스크</div>\n        <textarea className=\"transcript\" value={transcript} onChange={() => {}} />\n        <button onClick={toggleListening}>\n          {listening ? '음성인식 중지' : '음성인식 시작'}\n        </button>\n      </div>\n      <div className={styles.categoryNavbar}>\n        {categories.map(category => (\n          <CategoryButton\n            categoryId={category.categoryId}\n            categoryName={category.categoryName}\n            key={category.categoryId} \n            isActive={category.categoryId === activeCategoryId}\n            onclick={() => handleCategoryClick(category.categoryId)} \n          />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default CategoryNavbar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}