{"ast":null,"code":"var _jsxFileName = \"/Users/jeongjaeho/Desktop/project/Order/frontend/src/Navbar/CategoryNavbar.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styles from './style.module.css';\nimport CategoryButton from './CategoryButton';\nimport useSpeechToText from '../Speech';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CategoryNavbar({\n  categories,\n  handleCategoryClick,\n  activeCategoryId\n}) {\n  _s();\n  const {\n    transcript,\n    listening,\n    toggleListening\n  } = useSpeechToText();\n  const [activatedCategoryName, setActivatedCategoryName] = useState(null); // 활성화된 카테고리 이름 상태\n\n  useEffect(() => {\n    // 음성 인식 결과가 변경될 때마다 일치하는 카테고리를 찾음\n    const matchedCategory = categories.find(category => category.categoryName === transcript);\n    if (matchedCategory) {\n      handleCategoryClick(matchedCategory.categoryId); // 일치하는 카테고리를 클릭하는 함수 호출\n      setActivatedCategoryName(matchedCategory.categoryName); // 활성화된 카테고리 이름 상태 업데이트\n    }\n  }, [categories, transcript, handleCategoryClick]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.CategoryWrapper,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.CategoryTitle,\n        children: \"\\uAC1C\\uBC1C\\uC790 \\uD0A4\\uC624\\uC2A4\\uD06C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"transcript\",\n        value: transcript,\n        onChange: () => {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleListening,\n        children: listening ? '음성인식 중지' : '음성인식 시작'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.categoryNavbar,\n      children: categories.map(category => /*#__PURE__*/_jsxDEV(CategoryButton, {\n        categoryId: category.categoryId,\n        categoryName: category.categoryName,\n        isActive: category.categoryName === activatedCategoryName // 현재 활성화된 카테고리일 때\n        ,\n        onClick: () => {\n          // 해당 카테고리 버튼을 클릭하는 함수 호출\n          handleCategoryClick(category.categoryId);\n          setActivatedCategoryName(category.categoryName); // 활성화된 카테고리 이름 상태 업데이트\n        }\n      }, category.categoryId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(CategoryNavbar, \"iCAM38bSm2xZSJ20xjlmAJJj8mY=\", false, function () {\n  return [useSpeechToText];\n});\n_c = CategoryNavbar;\nvar _c;\n$RefreshReg$(_c, \"CategoryNavbar\");","map":{"version":3,"names":["React","useEffect","useState","styles","CategoryButton","useSpeechToText","jsxDEV","_jsxDEV","Fragment","_Fragment","CategoryNavbar","categories","handleCategoryClick","activeCategoryId","_s","transcript","listening","toggleListening","activatedCategoryName","setActivatedCategoryName","matchedCategory","find","category","categoryName","categoryId","children","className","CategoryWrapper","CategoryTitle","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","onClick","categoryNavbar","map","isActive","_c","$RefreshReg$"],"sources":["/Users/jeongjaeho/Desktop/project/Order/frontend/src/Navbar/CategoryNavbar.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styles from './style.module.css';\nimport CategoryButton from './CategoryButton';\nimport useSpeechToText from '../Speech';\n\ninterface CategoryNavbarProps {\n  categories: { categoryId: number; categoryName: string }[];\n  handleCategoryClick: (categoryId: number) => void;\n  activeCategoryId: number;\n}\n\nexport default function CategoryNavbar({ categories, handleCategoryClick, activeCategoryId }: CategoryNavbarProps) {\n  const { transcript, listening, toggleListening } = useSpeechToText();\n  const [activatedCategoryName, setActivatedCategoryName] = useState<string | null>(null); // 활성화된 카테고리 이름 상태\n\n  useEffect(() => {\n    // 음성 인식 결과가 변경될 때마다 일치하는 카테고리를 찾음\n    const matchedCategory = categories.find(category => category.categoryName === transcript);\n    if (matchedCategory) {\n      handleCategoryClick(matchedCategory.categoryId); // 일치하는 카테고리를 클릭하는 함수 호출\n      setActivatedCategoryName(matchedCategory.categoryName); // 활성화된 카테고리 이름 상태 업데이트\n    }\n  }, [categories, transcript, handleCategoryClick]);\n\n  return (\n    <>\n      <div className={styles.CategoryWrapper}>\n        <div className={styles.CategoryTitle}>개발자 키오스크</div>\n        <textarea className=\"transcript\" value={transcript} onChange={() => {}} />\n        <button onClick={toggleListening}>\n          {listening ? '음성인식 중지' : '음성인식 시작'}\n        </button>\n      </div>\n      <div className={styles.categoryNavbar}>\n        {categories.map(category => (\n          <CategoryButton\n            key={category.categoryId}\n            categoryId={category.categoryId}\n            categoryName={category.categoryName}\n            isActive={category.categoryName === activatedCategoryName} // 현재 활성화된 카테고리일 때\n            onClick={() => {\n              // 해당 카테고리 버튼을 클릭하는 함수 호출\n              handleCategoryClick(category.categoryId);\n              setActivatedCategoryName(category.categoryName); // 활성화된 카테고리 이름 상태 업데이트\n            }}\n          />\n        ))}\n      </div>\n    </>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,eAAe,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAQxC,eAAe,SAASC,cAAcA,CAAC;EAAEC,UAAU;EAAEC,mBAAmB;EAAEC;AAAsC,CAAC,EAAE;EAAAC,EAAA;EACjH,MAAM;IAAEC,UAAU;IAAEC,SAAS;IAAEC;EAAgB,CAAC,GAAGZ,eAAe,CAAC,CAAC;EACpE,MAAM,CAACa,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGjB,QAAQ,CAAgB,IAAI,CAAC,CAAC,CAAC;;EAEzFD,SAAS,CAAC,MAAM;IACd;IACA,MAAMmB,eAAe,GAAGT,UAAU,CAACU,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,YAAY,KAAKR,UAAU,CAAC;IACzF,IAAIK,eAAe,EAAE;MACnBR,mBAAmB,CAACQ,eAAe,CAACI,UAAU,CAAC,CAAC,CAAC;MACjDL,wBAAwB,CAACC,eAAe,CAACG,YAAY,CAAC,CAAC,CAAC;IAC1D;EACF,CAAC,EAAE,CAACZ,UAAU,EAAEI,UAAU,EAAEH,mBAAmB,CAAC,CAAC;EAEjD,oBACEL,OAAA,CAAAE,SAAA;IAAAgB,QAAA,gBACElB,OAAA;MAAKmB,SAAS,EAAEvB,MAAM,CAACwB,eAAgB;MAAAF,QAAA,gBACrClB,OAAA;QAAKmB,SAAS,EAAEvB,MAAM,CAACyB,aAAc;QAAAH,QAAA,EAAC;MAAQ;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACpDzB,OAAA;QAAUmB,SAAS,EAAC,YAAY;QAACO,KAAK,EAAElB,UAAW;QAACmB,QAAQ,EAAEA,CAAA,KAAM,CAAC;MAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC1EzB,OAAA;QAAQ4B,OAAO,EAAElB,eAAgB;QAAAQ,QAAA,EAC9BT,SAAS,GAAG,SAAS,GAAG;MAAS;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACNzB,OAAA;MAAKmB,SAAS,EAAEvB,MAAM,CAACiC,cAAe;MAAAX,QAAA,EACnCd,UAAU,CAAC0B,GAAG,CAACf,QAAQ,iBACtBf,OAAA,CAACH,cAAc;QAEboB,UAAU,EAAEF,QAAQ,CAACE,UAAW;QAChCD,YAAY,EAAED,QAAQ,CAACC,YAAa;QACpCe,QAAQ,EAAEhB,QAAQ,CAACC,YAAY,KAAKL,qBAAsB,CAAC;QAAA;QAC3DiB,OAAO,EAAEA,CAAA,KAAM;UACb;UACAvB,mBAAmB,CAACU,QAAQ,CAACE,UAAU,CAAC;UACxCL,wBAAwB,CAACG,QAAQ,CAACC,YAAY,CAAC,CAAC,CAAC;QACnD;MAAE,GARGD,QAAQ,CAACE,UAAU;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASzB,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA,eACN,CAAC;AAEP;AAAClB,EAAA,CAvCuBJ,cAAc;EAAA,QACeL,eAAe;AAAA;AAAAkC,EAAA,GAD5C7B,cAAc;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}