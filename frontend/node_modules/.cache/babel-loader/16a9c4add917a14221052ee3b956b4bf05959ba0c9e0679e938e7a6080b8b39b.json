{"ast":null,"code":"var _jsxFileName = \"/Users/jeongjaeho/Desktop/project/Order/frontend/src/Navbar/CategoryNavbar.tsx\",\n  _s = $RefreshSig$();\n// CategoryNavbar.js\n\nimport React, { useEffect, useState } from 'react';\nimport styles from './style.module.css';\nimport CategoryButton from './CategoryButton';\nimport useSpeechToText from '../Speech';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CategoryNavbar = ({\n  categories,\n  handleCategoryClick,\n  activeCategoryId\n}) => {\n  _s();\n  const {\n    transcript,\n    listening,\n    toggleListening\n  } = useSpeechToText();\n  const [recognizedCategory, setRecognizedCategory] = useState('');\n  useEffect(() => {\n    // categories 배열이 비어있지 않은 경우에만 첫 번째 카테고리의 상품을 표시\n    if (categories.length > 0 && recognizedCategory !== '') {\n      const matchingCategory = categories.find(category => category.categoryName === recognizedCategory);\n      if (matchingCategory) {\n        handleCategoryClick(matchingCategory.categoryId);\n      }\n    }\n  }, [recognizedCategory, categories, handleCategoryClick]);\n  useEffect(() => {\n    // transcript 값이 변경될 때마다 실행되어 인식된 카테고리를 설정\n    setRecognizedCategory(transcript);\n  }, [transcript]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.CategoryWrapper,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.CategoryTitle,\n        children: \"\\uAC1C\\uBC1C\\uC790 \\uD0A4\\uC624\\uC2A4\\uD06C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"transcript\",\n        value: transcript,\n        onChange: () => {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleListening,\n        children: listening ? '음성인식 중지' : '음성인식 시작'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.categoryNavbar,\n      children: categories.map(category => /*#__PURE__*/_jsxDEV(CategoryButton, {\n        categoryId: category.categoryId,\n        categoryName: category.categoryName,\n        isActive: category.categoryId === activeCategoryId,\n        onclick: () => handleCategoryClick(category.categoryId)\n      }, category.categoryId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(CategoryNavbar, \"HHyCRGVLpjhp9AK7iSm6rj9LBWg=\", false, function () {\n  return [useSpeechToText];\n});\n_c = CategoryNavbar;\nexport default CategoryNavbar;\nvar _c;\n$RefreshReg$(_c, \"CategoryNavbar\");","map":{"version":3,"names":["React","useEffect","useState","styles","CategoryButton","useSpeechToText","jsxDEV","_jsxDEV","Fragment","_Fragment","CategoryNavbar","categories","handleCategoryClick","activeCategoryId","_s","transcript","listening","toggleListening","recognizedCategory","setRecognizedCategory","length","matchingCategory","find","category","categoryName","categoryId","children","className","CategoryWrapper","CategoryTitle","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","onClick","categoryNavbar","map","isActive","onclick","_c","$RefreshReg$"],"sources":["/Users/jeongjaeho/Desktop/project/Order/frontend/src/Navbar/CategoryNavbar.tsx"],"sourcesContent":["// CategoryNavbar.js\n\nimport React, { useEffect, useState } from 'react';\nimport styles from './style.module.css';\nimport CategoryButton from './CategoryButton';\nimport useSpeechToText from '../Speech';\n\ninterface CategoryNavbarProps {\n  categories: { categoryId: number; categoryName: string }[];\n  handleCategoryClick: (categoryId: number) => void;\n  activeCategoryId: number;\n}\n\nconst CategoryNavbar: React.FC<CategoryNavbarProps> = ({ categories, handleCategoryClick, activeCategoryId }) => {\n  const { transcript, listening, toggleListening } = useSpeechToText();\n  const [recognizedCategory, setRecognizedCategory] = useState<string>('');\n\n  useEffect(() => {\n    // categories 배열이 비어있지 않은 경우에만 첫 번째 카테고리의 상품을 표시\n    if (categories.length > 0 && recognizedCategory !== '') {\n      const matchingCategory = categories.find(category => category.categoryName === recognizedCategory);\n      if (matchingCategory) {\n        handleCategoryClick(matchingCategory.categoryId);\n      }\n    }\n  }, [recognizedCategory, categories, handleCategoryClick]);\n\n  useEffect(() => {\n    // transcript 값이 변경될 때마다 실행되어 인식된 카테고리를 설정\n    setRecognizedCategory(transcript);\n  }, [transcript]);\n\n  return (\n    <>\n      <div className={styles.CategoryWrapper}>\n        <div className={styles.CategoryTitle}>개발자 키오스크</div>\n        <textarea className=\"transcript\" value={transcript} onChange={() => {}} />\n        <button onClick={toggleListening}>\n          {listening ? '음성인식 중지' : '음성인식 시작'}\n        </button>\n      </div>\n      <div className={styles.categoryNavbar}>\n        {categories.map(category => (\n          <CategoryButton\n            categoryId={category.categoryId}\n            categoryName={category.categoryName}\n            key={category.categoryId} \n            isActive={category.categoryId === activeCategoryId}\n            onclick={() => handleCategoryClick(category.categoryId)} \n          />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default CategoryNavbar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}